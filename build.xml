<?xml version="1.0" encoding="UTF-8"?>
<project name="oci-driver" default="build">

   <!-- Use this when the tools are managed by Composer in ${basedir}/vendor/bin add .bat for windows -->
   <property name="pdepend" value="${basedir}/vendor/bin/pdepend.bat" />
   <property name="phploc" value="${basedir}/vendor/bin/phploc.bat" />
   <property name="phpmd" value="${basedir}/vendor/bin/phpmd.bat" />
   <property name="phpcs" value="${basedir}/vendor/bin/phpcs.bat" />
   <property name="phpcpd" value="${basedir}/vendor/bin/phpcpd.bat" />
   <property name="phpunit" value="${basedir}/vendor/bin/phpunit.bat" />
   <property name="phpcb" value="${basedir}/vendor/bin/phpcb.bat" />
   <property name="phpmetrics" value="${basedir}/vendor/bin/phpmetrics.bat" />
   <property name="phpstan" value="${basedir}/vendor/bin/phpstan.bat" />

   <target name="build" depends="static-analysis,phpunit,phpcb,phpmetrics,phpstan,-check-failure" description="Performs static analysis, runs the tests, and generates project documentation" />

   <target name="static-analysis" depends="lint,pdepend,phploc,phpmd,phpcs,phpcpd" description="Performs static analysis" />

   <target name="clean" unless="clean.done" description="Cleanup build artifacts">
      <delete dir="${basedir}/build/coverage" />
      <delete dir="${basedir}/build/logs" />
      <delete dir="${basedir}/build/pdepend" />
      <delete dir="${basedir}/build/phpcb" />
      <delete dir="${basedir}/build/phpmetrics" />

      <property name="clean.done" value="true" />
   </target>

   <target name="prepare" unless="prepare.done" depends="clean" description="Prepare for build">
      <mkdir dir="${basedir}/build/coverage" />
      <mkdir dir="${basedir}/build/logs" />
      <mkdir dir="${basedir}/build/pdepend" />
      <mkdir dir="${basedir}/build/phpcb" />
      <mkdir dir="${basedir}/build/phpmetrics" />

      <property name="prepare.done" value="true" />
   </target>

   <target name="lint" depends="prepare" unless="lint.done" description="Check all php classes are valid">
      <apply executable="php" failonerror="true" taskname="lint">
         <arg value="-l" />

         <fileset dir="${basedir}/src">
            <include name="**/*.php" />
            <modified />
         </fileset>

         <fileset dir="${basedir}/tests">
            <include name="**/*.php" />
            <modified />
         </fileset>
      </apply>
      <delete file="cache.properties" quiet="true" />
      <property name="lint.done" value="true" />
   </target>

   <target name="pdepend" unless="pdepend.done" depends="prepare" description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
      <exec executable="${pdepend}" taskname="pdepend">
         <arg value="--jdepend-xml=${basedir}/build/logs/pdepend.xml" />
         <arg value="--summary-xml=${basedir}/build/logs/summary.xml" />
         <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
         <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
         <arg path="${basedir}/src" />
      </exec>

      <property name="pdepend.done" value="true" />
   </target>

   <target name="phploc" unless="phploc.done" depends="prepare" description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
      <exec executable="${phploc}" taskname="phploc">
         <arg value="--count-tests" />
         <arg value="--log-csv" />
         <arg path="${basedir}/build/logs/phploc.csv" />
         <arg value="--log-xml" />
         <arg path="${basedir}/build/logs/phploc.xml" />
         <arg path="${basedir}/src" />
         <arg path="${basedir}/tests" />
      </exec>

      <property name="phploc.done" value="true" />
   </target>

   <target name="phpmd" depends="prepare" description="Perform project mess detection using PHPMD and log result in XML format">
      <exec executable="${phpmd}" taskname="phpmd">
         <arg path="${basedir}/src" />
         <arg value="xml" />
         <arg path="${basedir}/phpmd.xml" />
         <arg value="--reportfile" />
         <arg path="${basedir}/build/logs/pmd.xml" />
      </exec>
   </target>

   <target name="phpcs" unless="phpcs.done" depends="prepare" description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
      <exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
         <arg value="--report=checkstyle" />
         <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
         <arg value="--standard=PSR2" />
         <arg value="--extensions=php" />
         <arg value="--ignore=autoload.php" />
         <arg path="${basedir}/src" />
         <arg path="${basedir}/tests" />
      </exec>

      <property name="phpcs.done" value="true" />
   </target>

   <target name="phpcpd" unless="phpcpd.done" depends="prepare" description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
      <exec executable="${phpcpd}" taskname="phpcpd">
         <arg value="--log-pmd" />
         <arg path="${basedir}/build/logs/pmd-cpd.xml" />
         <arg path="${basedir}/src" />
      </exec>

      <property name="phpcpd.done" value="true" />
   </target>

   <target name="phpunit" unless="phpunit.done" depends="prepare" description="Run unit tests with PHPUnit">
      <exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
         <arg value="--configuration" />
         <arg path="${basedir}/phpunit.xml.dist" />
         <arg path="${basedir}/tests" />
      </exec>

      <property name="phpunit.done" value="true" />
   </target>

   <target name="phpcb" unless="phpcb.done" depends="prepare" description="Generate a code browser using phpcb">
      <exec executable="${phpcb}" taskname="phpcb">
         <arg line="--log ${basedir}/build/logs
                    --source ${basedir}/src/
                    --output ${basedir}/build/phpcb" />
      </exec>

      <property name="phpcb.done" value="true" />
   </target>

   <target name="phpmetrics" unless="phpmetrics.done" depends="prepare" description="Generate various metrics about PHP projects using phpmetrics">
      <exec executable="${phpmetrics}" taskname="phpmetrics">
         <arg line="--report-html=${basedir}/build/phpmetrics
                    --report-violations=${basedir}/build/logs/violations.xml
                    --junit=${basedir}/build/logs/junit.xml
                    ${basedir}/src" />
      </exec>

      <property name="phpmetrics.done" value="true" />
   </target>

   <target name="phpstan" unless="phpstan.done" depends="prepare" description="PHP Static Analysis Tool - discover bugs in your code without running it">
      <exec executable="${phpstan}" taskname="phpstan">
         <arg line="analyse ${basedir}/src ${basedir}/tests --error-format=checkstyle > ${basedir}/build/logs/phpstan.xml"/>
      </exec>

      <property name="phpstan.done" value="true" />
   </target>


   <target name="-check-failure">
      <fail message="PHPUnit did not finish successfully">
         <condition>
            <not>
               <equals arg1="${result.phpunit}" arg2="0" />
            </not>
         </condition>
      </fail>
   </target>
</project>
